#include <stdio.h>
#include <stdlib.h>

// Определение структуры узла очереди
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Определение структуры очереди
typedef struct Queue {
    Node* front;
    Node* rear;
} Queue;

// Функция для создания нового узла
Node* newNode(int data) {
    Node* temp = (Node*)malloc(sizeof(Node));
    temp->data = data;
    temp->next = NULL;
    return temp;
}

// Функция для создания очереди
Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));
    q->front = q->rear = NULL;
    return q;
}

// Функция для добавления элемента в очередь
void enqueue(Queue* q, int data) {
    Node* temp = newNode(data);
    if (q->rear == NULL) {
        q->front = q->rear = temp;
        return;
    }
    q->rear->next = temp;
    q->rear = temp;
}

// Функция для удаления элемента из очереди
void dequeue(Queue* q) {
    if (q->front == NULL) {
        printf("Очередь пуста\n");
        return;
    }
    Node* temp = q->front;
    q->front = q->front->next;
    if (q->front == NULL) {
        q->rear = NULL;
    }
    free(temp);
}

// Функция для печати содержимого очереди
void printQueue(Queue* q) {
    Node* temp = q->front;
    while (temp) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    Queue* q = createQueue();
    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 30);
    enqueue(q, 40);
    printf("Содержимое очереди: ");
    printQueue(q);
    dequeue(q);
    printf("Содержимое очереди после удаления: ");
    printQueue(q);
    return 0;
}
