#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Определение структуры узла
struct node {
    char inf[256];        // Полезная информация
    int pr;               // Приоритет
    struct node *next;    // Ссылка на следующий элемент
};

// Глобальные переменные для списка
struct node *head = NULL; // Указатель на начало списка
struct node *last = NULL; // Указатель на конец списка

// Создание нового узла и получение данных от пользователя
struct node *get_struct(void) {
    struct node *p = NULL;
    char s[256];
    
    // Выделяем память под новый элемент списка
    if ((p = (struct node*)malloc(sizeof(struct node))) == NULL) {
        printf("Ошибка при распределении памяти\n");
        exit(1);
    }
    
    // Вводим данные
    printf("Введите название объекта: \n");
    scanf("%255s", s); // Ограничиваем ввод, чтобы избежать переполнения буфера
    if (*s == 0) {
        printf("Запись не была произведена\n");
        free(p); // Освобождаем память, если ввод пустой
        return NULL;
    }
    
    // Копируем введенные данные в структуру
    strcpy(p->inf, s);

    // Вводим приоритет
    printf("Введите приоритет: ");
    scanf("%d", &(p->pr));

    p->next = NULL;
    return p; // Возвращаем указатель на созданный элемент
}

// Последовательное добавление в список элемента (в конец)
void spstore(void) {
    struct node *p = NULL;
    p = get_struct();
    
    // Если список пустой, устанавливаем голову и конец списка
    if (head == NULL && p != NULL) {
        head = p;
        last = p;
    }
    // Если список не пустой, добавляем элемент в конец
    else if (head != NULL && p != NULL) {
        last->next = p;
        last = p;
    }
    return;
}

// Функция для вывода элементов списка
void review(void) {
    struct node *temp = head; // Указатель для обхода списка
    if (head == NULL) {
        printf("Список пуст\n");
    } else {
        while (temp != NULL) {
            printf("%s\n", temp->inf); // Выводим информацию элемента
            temp = temp->next;         // Переходим к следующему элементу
        }
    }
}

// Удаление элемента по содержимому
void del(char *name) {
    struct node *struc = head; // Указатель для обхода списка установлен на начало списка
    struct node *prev = NULL;  // Указатель на предшествующий удаляемому элемент
    int flag = 0;              // Индикатор отсутствия удаляемого элемента в списке

    if (head == NULL) { // Если голова списка равна NULL, то список пуст
        printf("Список пуст\n");
        return;
    }

    // Проверка, если удаляемый элемент - первый
    if (strcmp(name, struc->inf) == 0) {
        flag = 1;
        head = struc->next; // Устанавливаем голову на следующий элемент
        free(struc);        // Удаляем первый элемент
        struc = head;       // Устанавливаем указатель для продолж