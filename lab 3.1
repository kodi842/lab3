#include <stdio.h>
#include <stdlib.h>

// Узел стека
typedef struct Node {
    int priority;
    int numb;
    struct Node* next;
} Node;

// Структура данных Стек
typedef struct Stack {
    Node* top;
} Stack;

// Функция создания нового узла
Node* newNode(int d, int p) {
    Node* temp = (Node*)malloc(sizeof(Node));
    temp->numb = d;
    temp->priority = p;
    temp->next = NULL;
    return temp;
}

// Функция создания стека
Stack* createStack() {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->top = NULL;
    return stack;
}

// Функция, которая вставляет узел по приоритету
void push(Stack* stack, int d, int p) {
    Node* temp = newNode(d, p);

    // Особый случай для вершины
    if (stack->top == NULL || stack->top->priority < p) {
        temp->next = stack->top;
        stack->top = temp;
    } else {
        Node* start = stack->top;
        // Найти положение нового узла
        while (start->next != NULL && start->next->priority >= p) {
            start = start->next;
        }
        temp->next = start->next;
        start->next = temp;
    }
}

// Удаление узла с наивысшим приоритетом
void pop(Stack* stack) {
    if (stack->top == NULL) {
        printf("Стек пуст\n");
        return;
    }
    Node* temp = stack->top;
    stack->top = stack->top->next;
    free(temp);
}

// Печать стека
void printStack(Stack* stack) {
    Node* head = stack->top;
    while (head != NULL) {
        printf("Число: %d Приоритет: %d\n", head->numb, head->priority);
        head = head->next;
    }
}

int main() {
    Stack* stack = createStack();

    push(stack, 4, 1);
    push(stack, 5, 2);
    push(stack, 6, 3);
    push(stack, 7, 0);

    printf("Стек с приоритетами:\n");
    printStack(stack);

    pop(stack);

    printf("\nПосле удаления одного элемента:\n");
    printStack(stack);

    return 0;
}
