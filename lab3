#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Определение структуры узла списка
typedef struct node {
    char inf[256]; // Полезная информация
    int priority;  // Приоритет объекта
    struct node *next; // Ссылка на следующий элемент
} node;

struct node *head = NULL, *last = NULL;

// Функция для создания нового узла
struct node *get_struct(void) {
    struct node *p = NULL;
    char s[256];
    int prio;

    if ((p = (node*)malloc(sizeof(struct node))) == NULL) {
        printf("Ошибка при распределении памяти\n");
        exit(1);
    }
    printf("Введите название объекта: \n");
    scanf("%s", s);
    printf("Введите приоритет объекта: \n");
    scanf("%d", &prio);

    if (*s == 0) {
        printf("Запись не была произведена\n");
        return NULL;
    }

    strcpy(p->inf, s);
    p->priority = prio;
    p->next = NULL;

    return p;
}

/* Последовательное добавление в список элемента в соответствии с приоритетом */
void spstore(void) {
    struct node *p = NULL, *current = NULL, *prev = NULL;
    p = get_struct();

    if (p == NULL) return;

    // Если списка нет, то устанавливаем голову списка
    if (head == NULL) {
        head = p;
        last = p;
    } else {
        // Вставляем элемент в список по приоритету
        current = head;
        while (current != NULL && current->priority >= p->priority) {
            prev = current;
            current = current->next;
        }
        if (prev == NULL) { // Вставка в начало списка
            p->next = head;
            head = p;
        } else { // Вставка между элементами или в конец списка
            p->next = current;
            prev->next = p;
            if (current == NULL) {
                last = p;
            }
        }
    }
    return;
}

/* Просмотр содержимого списка */
void review(void) {
    struct node *struc = head;
    if (head == NULL) {
        printf("Список пуст\n");
        return;
    }
    while (struc) {
        printf("Имя - %s, Приоритет - %d\n", struc->inf, struc->priority);
        struc = struc->next;
    }
    return;
}

/* Поиск элемента по содержимому */
struct node *find(char *name) {
    struct node *struc = head;
    if (head == NULL) {
        printf("Список пуст\n");
        return NULL;
    }
    while (struc) {
        if (strcmp(name, struc->inf) == 0) {
            return struc;
        }
        struc = struc->next;
    }
    printf("Элемент не найден\n");
    return NULL;
}

/* Удаление элемента по содержимому */
void del(char *name) {
    struct node *struc = head; // указатель, проходящий по списку установлен на начало списка
    struct node *prev; // указатель на предшествующий удаляемому элемент
    int flag = 0; // индикатор отсутствия удаляемого элемента в списке
    if (head == NULL) { // если голова списка равна NULL, то список пуст
        printf("Список пуст\n");
        return;
    }
    if (strcmp(name, struc->inf) == 0) { // если удаляемый элемент - первый
        flag = 1;
        head = struc->next; // установливаем голову на следующий элемент
        free(struc); // удаляем первый элемент
        struc = head; // устанавливаем указатель для продолжения поиска
    } else {
        prev = struc;
        struc = struc->next;
    }
    while (struc) { // проход по списку и поиск удаляемого элемента
        if (strcmp(name, struc->inf) == 0) { // если нашли, то
            flag = 1; // выставляем индикатор
            if (struc->next) { // если найденный элемент не последний в списке
                prev->next = struc->next; // меняем указатели
                free(struc); // удаляем элемент
                struc = prev->next; // устанавливаем указатель для продолжения поиска
            } else { // если найденный элемент последний в списке
                prev->next = NULL; // обнуляем указатель предшествующего элемента
                free(struc); // удаляем элемент
                return;
            }
        } else { // если не нашли, то
            prev = struc; // устанавливаем указатели для продолжения поиска
            struc = struc->next;
        }
    }
    if (flag == 0) { // если флаг = 0, значит нужный элемент не найден
        printf("Элемент не найден\n");
        return;
    }
}

int main() {
    int choice;
    char name[256];

    while (1) {
        printf("Выберите операцию:\n");
        printf("1. Добавить элемент\n");
        printf("2. Просмотреть список\n");
        printf("3. Найти элемент\n");
        printf("4. Удалить элемент\n");
        printf("5. Выход\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                spstore();
                break;
            case 2:
                review();
                break;
            case 3:
                printf("Введите название объекта для поиска: \n");
                scanf("%s", name);
                struct node *found = find(name);
                if (found) {
                    printf("Найден элемент: %s с приоритетом %d\n", found->inf, found->priority);
                }
                break;
            case 4:
                printf("Введите название объекта для удаления: \n");
                scanf("%s", name);
                del(name);
                break;
            case 5:
                exit(0);
            default:
                printf("Неверный выбор\n");
        }
    }
    return 0;
}
